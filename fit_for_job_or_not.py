# -*- coding: utf-8 -*-
"""Fit for job or not.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tbvkyBQLeJJRkpIzgP3n16Jg-ujPsTHi

#data loading
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline
import random
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers,models
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model

#Mount Drive
from google.colab import drive
drive.mount('/content/drive')

#reading raw data using pandae dataframe
import pandas as pd
traits=pd.read_csv('/content/drive/MyDrive/DIP Project/test/semi final.xlsx - Form Responses 1.csv')
traits.head()

"""#data cleaning"""

#Drop unnecessary column
traits.drop(['Name','University Name','Department ( বিভাগ)'],axis=1,inplace=True)

#replace Column name 
traits=traits.rename({"Age ":"Age"},axis=1)

traits['introvert']=traits['introvert'].replace("Yes ( হ্যাঁ )",0)\
                                      .replace("No (না)",1)\
                                      .replace("I don't know if I'm an introvert or not. But I cannot talk to strangers easily. But once we get to know each other then we talk a lot.(ইন্ট্রোভার্ট কিনা জানি না।  তবে অপরিচিত কারো সাথে কথা বলতে  পরি না। কিন্তু পরিচয় একবার হয়ে গেলে অনেক বেশি কথা বলি।)",1)
print(traits['introvert'])

traits['hang out']=traits['hang out'].replace("Yes ( হ্যাঁ )",1)\
                                      .replace("No (না)",0)\
                                      .replace("I like to chat but now don't get time.(পছন্দ করি কিন্তু আড্ডা দেওয়া হয় নাহ।)",2)
traits['hang out']

traits['CGPA']=traits['CGPA'].replace("Yes ( হ্যাঁ )",1)\
                                      .replace("No (না)",0)\
                                     
traits['CGPA']

traits['assignments']=traits['assignments'].replace("I start two-three days before submission.(আমি জমা দেওয়ার দুই-তিন দিন আগে শুরু করি।)",0)\
                                      .replace("I start on very first day. (আমি প্রথম দিন থেকেই শুরু করি। )",1)\
                                      .replace("I start toward the end and request sir for extending the time.(শেষের দিকে শুরু করি এবং স্যারকে সময় বাড়িয়ে দেওয়ার জন্য অনুরোধ করি)",0)\
                                      .replace("I start within two or three days.(আমি দুই-তিন দিনের মধ্যে শুরু করি।)",1)\
                                      .replace("I start two-three days before submission.",0)\
                                      .replace("I start toward the end and request sir for extending the time.",0)\
                                     
traits['assignments']

traits['social media']=traits['social media'].replace("0-1 Hour (0-১ ঘন্টা)",1)\
                                      .replace("1-3  Hour (১-৩ ঘন্টা)",1)\
                                      .replace("3-5  Hour (৩-5 ঘন্টা)",0)\
                                      .replace("more than 5 Hour ( ৫ ঘন্টার বেশি)",0)\
                                     
traits['social media']

traits['skills']=traits['skills'].replace("0-1 Hour (0-১ ঘন্টা)",0)\
                                      .replace("1-3  Hour (১-৩ ঘন্টা)",0)\
                                      .replace("3-5  Hour (৩-5 ঘন্টা)",1)\
                                      .replace("more than 5 Hour ( ৫ ঘন্টার বেশি)",1)\
                                     
traits['skills']

traits['study']=traits['study'].replace("0-1 Hour (0-১ ঘন্টা)",0)\
                                      .replace("1-3  Hour (১-৩ ঘন্টা)",0)\
                                      .replace("3-5  Hour (৩-5 ঘন্টা)",1)\
                                      .replace("more than 5 Hour ( ৫ ঘন্টার বেশি)",1)\
                                     
traits['study']

traits['examination']=traits['examination'].replace("Yes ( হ্যাঁ )",0)\
                                      .replace("No (না)",1)\
                                      .replace("No, I know that I would have felt the same thing even I had given  one more day.(না, আমি জানি যে আরও একদিন দিলেও আমি একই জিনিস অনুভব করতাম।)",1)
traits['examination']

traits['hard worker']=traits['hard worker'].replace("Yes ( হ্যাঁ )",1)\
                                      .replace("No (না)",0)
                                     
traits['hard worker']

traits['Age']=traits['Age'].replace("18-22",0)\
                                      .replace("22-26",1)\
                                      .replace("22",1)\
                                      .replace("28",2)\
                                      .replace("32",2)
                                     
traits['Age']

traits['punctuality']=traits['punctuality'].replace(1,0)\
                                        .replace(2,0)\
                                      .replace(3,0)\
                                      .replace(4,0)\
                                      .replace(5,0)\
                                      .replace(6,1)\
                                      .replace(7,1)\
                                      .replace(8,1)\
                                      .replace(9,1)\
                                      .replace(10,1)
                                     
traits['punctuality']

traits['communication skills']=traits['communication skills'].replace(1,0)\
                                      .replace(2,0)\
                                      .replace(3,0)\
                                      .replace(4,0)\
                                      .replace(5,0)\
                                      .replace(6,1)\
                                      .replace(7,1)\
                                      .replace(8,1)\
                                      .replace(9,1)\
                                      .replace(10,1)
                                     
traits['communication skills']

traits.drop(columns=['religion','Age','hang out'])

"""#weight assign and data proccesing"""

list_=[]
for i in range(102):
  result=((traits['introvert'][i]*1.5)+(traits['punctuality'][i]*2)+(traits['communication skills'][i]*2)+(traits['hard worker'][i]*2)+(traits['skills'][i]*2.5)+
         (traits['examination'][i]*1)+(traits['study'][i]*1)+(traits['social media'][i]*1)+(traits['assignments'][i]*2)+(traits['CGPA'][i]*1.5))
  list_.append(result)
result

class_list=[]
for j in list_:
  if(j < 8):
    class_list.append(0)
  else:
    class_list.append(1)
len(class_list)

filtered=pd.DataFrame({'Selected':class_list,
                   'photo':traits['photo'] })

filtered.head()



"""#finding fit for job or not using cnn"""

Image_train=[]
Image_test=[]

for i in range(102):
   img=filtered["photo"][i]
   try:
    image_path='/content/drive/MyDrive/image/final segmented image/'+img
    image_r=cv2.imread(image_path)
    image=cv2.resize(image_r,(224,224))
    Class=filtered["Selected"][i]
    Image_train.append([image,Class])
   except:
    print("not done"+str(i))

Image_train=[]
Image_test=[]

for i in range(102):
   img=filtered["photo"][i]
   try:
    image_path='/content/drive/MyDrive/image/final segmented image/'+img
    image_r=cv2.imread(image_path)
    image=cv2.resize(image_r,(224,224))

    if i%5==0:
      Class=filtered["Selected"][i]
      Image_test.append([image,Class])
    else:
      Class=filtered["Selected"][i]
      Image_train.append([image,Class])
   except:
    print("not done"+str(i))

random.shuffle(Image_train)
random.shuffle(Image_test)
X_train=[]
Y_train=[]
X_test=[]
Y_test=[]
for x,y in Image_train:
  X_train.append(x)
  Y_train.append(y)
for x,y in Image_test:
  X_test.append(x)
  Y_test.append(y)

X_train=np.array(X_train).reshape(-1,224,224,3)
X_test=np.array(X_test).reshape(-1,224,224,3)
X_train=X_train/255.0
X_test=X_test/255
Y_train=np.array(Y_train)
Y_test=np.array(Y_test)

datagen = ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    validation_split=0.2)

datagen.fit(X_train)

CNN=models.Sequential([
    layers.Conv2D(128,(3,3),activation='relu',input_shape=(224,224,3)),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(32,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
     layers.Conv2D(16,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
     layers.Conv2D(32,(3,3),activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Flatten(),
    layers.Dense(128,activation='relu'),
    layers.Dense(64,activation='relu'),
    layers.Dense(1,activation='sigmoid')


])
CNN.summary()

CNN.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

CNN.fit(datagen.flow(X_train, Y_train,
         subset='training'),epochs=10)

CNN.evaluate(X_test,Y_test)

"""#finding fit for job or not VGG19"""

Image_train=[]
Image_test=[]

for i in range(102):
   img=filtered["photo"][i]
   try:
    image_path='/content/drive/MyDrive/image/final segmented image/'+img
    image_r=cv2.imread(image_path)
    image=cv2.resize(image_r,(224,224))

    if i%5==0:
      Class=filtered["Selected"][i]
      Image_test.append([image,Class])
    else:
      Class=filtered["Selected"][i]
      Image_train.append([image,Class])
   except:
    print("not done"+str(i))

random.shuffle(Image_train)
random.shuffle(Image_test)
X_train=[]
Y_train=[]
X_test=[]
Y_test=[]
for x,y in Image_train:
  X_train.append(x)
  Y_train.append(y)
for x,y in Image_test:
  X_test.append(x)
  Y_test.append(y)

X_train=np.array(X_train).reshape(-1,224,224,3)
X_test=np.array(X_test).reshape(-1,224,224,3)
X_train=X_train/255.0
X_test=X_test/255
Y_train=np.array(Y_train)
Y_test=np.array(Y_test)

datagen = ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    validation_split=0.2)

datagen.fit(X_train)

from keras.applications.vgg19 import VGG19,preprocess_input

image_size=[224,224]
Vgg=VGG19(input_shape=image_size + [3],weights='imagenet',include_top=False)
for layer in Vgg.layers:
  layer.trainable=False

F=layers.Flatten()(Vgg.output)
prediction=layers.Dense(1,activation='sigmoid')(F)

VGG=Model(inputs=Vgg.input,outputs=prediction)
VGG.summary

VGG.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

VGG.fit(datagen.flow(X_train, Y_train,
         subset='training'),epochs=10)

VGG.evaluate(X_test,Y_test)

"""#finding fit for job or not using VGG19 without data agmenteyion"""

Image_train=[]
Image_test=[]

for i in range(102):
   img=filtered["photo"][i]
   try:
    image_path='/content/drive/MyDrive/image/final segmented image/'+img
    image_r=cv2.imread(image_path)
    image=cv2.resize(image_r,(224,224))

    if i%5==0:
      Class=filtered["Selected"][i]
      Image_test.append([image,Class])
    else:
      Class=filtered["Selected"][i]
      Image_train.append([image,Class])
   except:
    print("not done"+str(i))

random.shuffle(Image_train)
random.shuffle(Image_test)
X_train=[]
Y_train=[]
X_test=[]
Y_test=[]
for x,y in Image_train:
  X_train.append(x)
  Y_train.append(y)
for x,y in Image_test:
  X_test.append(x)
  Y_test.append(y)

X_train=np.array(X_train).reshape(-1,224,224,3)
X_test=np.array(X_test).reshape(-1,224,224,3)
X_train=X_train/255.0
X_test=X_test/255
Y_train=np.array(Y_train)
Y_test=np.array(Y_test)

from keras.applications.vgg19 import VGG19,preprocess_input
image_size=[224,224]
Vgg=VGG19(input_shape=image_size + [3],weights='imagenet',include_top=False)
for layer in Vgg.layers:
  layer.trainable=False

F=layers.Flatten()(Vgg.output)
prediction=layers.Dense(1,activation='sigmoid')(F)

VGG=Model(inputs=Vgg.input,outputs=prediction)

VGG.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

VGG.fit(X_train,Y_train,epochs=10)

VGG.evaluate(X_test,Y_test)